#include <windows.h>
#include <stdlib.h>
#include <gl/glut.h>

void init(void);
void tampil(void);
void mouse(int button, int state, int x, int y);
void ukuran(int,int);
void mouseMotion(int x, int y);

float xrot = 0.0f;
float yrot = 0.0f;
float xdiff = 0.0f;
float ydiff = 0.0f;
bool mouseDown = false;
int is_depth;

int main( int argc, char **argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowPosition(250, 80);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Virginia Tirza Tempomona - 67018261");
	init();
	glutDisplayFunc(tampil);
    glutReshapeFunc(ukuran);
	
	glutMouseFunc(mouse);
	glutMotionFunc(mouseMotion);
	glutIdleFunc(tampil);
	glutMainLoop();
	return 0;
 }
 
  void init(void)
 {
 	glClearColor(0.0, 0.0, 0.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHT0);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_LIGHTING);
    is_depth=1;
    glMatrixMode(GL_MODELVIEW);
 }
 
 void tampil(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	gluLookAt(0.0f,0.0f,3.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f); //penglihatan
	glRotatef(xrot,1.0f,0.0f,0.f);
	glRotatef(yrot,0.0f,0.0f,0.f);
	glPushMatrix();
	
	 //BAWAH	
 	glBegin(GL_QUADS);
	glColor3f(0.1,0.0,0.0);
	glVertex3f(-10.0,-10.0,10.0);
	glVertex3f(10.0,-10.0,10.0);
	glVertex3f(10.0,-10.0,-10.0);
	glVertex3f(-10.0,-10.0,-10.0);
	glEnd();
	
	//depan
	glBegin(GL_QUADS);
	glColor3f(1.0,1.0,0.7);
	glVertex3f(-10.0,-10.0,10.0);
	glVertex3f(-10.0,10.0,10.0);
	glVertex3f(10.0,10.0,10.0);
	glVertex3f(10.0,-10.0,10.0);
	glEnd();
	
	//PINTU
    glBegin(GL_POLYGON);
    glColor3f(0.1,0.0,0.0);
    glVertex3f (-3.0, -10.0, 10.1);
    glVertex3f (0.0, -10.0, 10.1);
	glVertex3f (0.0, 0.0, 10.1);
    glVertex3f (-3.0, 0.0, 10.1);
    glEnd();
    
	//ATAS PINTU
	glBegin(GL_LINES);
	glLineWidth(20.0);
    glColor3f(1.0,1.0,1.0);
    glVertex3f (-10.0, 3.0, 10.1);
    glVertex3f (2.0, 3.0, 10.1);
    
    glColor3f(0.75, 0.75, 0.75);
    glVertex3f (2.1,-5.0, 10.1);
    glVertex3f (3.5,-5.0, 10.1);

    glEnd();
	
    //DINDING ABU ABU
    glBegin(GL_POLYGON);
    glColor3f(0.75, 0.75, 0.75);
    glVertex3f (-10.0, -10.0, 10.1);
    glVertex3f (-7.0, -10.0, 10.1);
	glVertex3f (-7.0, 2.9, 10.1);
    glVertex3f (-10.0, 2.9, 10.1);
    glEnd();
    
    glBegin(GL_POLYGON);
    glColor3f(0.75, 0.75, 0.75);
    glVertex3f (2.1, -10.0, 10.1);
    glVertex3f (3.0, -10.0, 10.1);
	glVertex3f (3.0, -5.0, 10.1);
    glVertex3f (2.1, -5.0, 10.1);
    glEnd();
    
    glBegin(GL_POLYGON);
    glColor3f(0.75, 0.75, 0.75);
    glVertex3f (2.1,-5.2, 10.1);
    glVertex3f (4.5,-5.2, 10.1);
    glVertex3f (4.5,-4.5, 10.1);
    glVertex3f (2.1,-4.5, 10.1);
    glEnd();
    
    glBegin(GL_POLYGON);
    glColor3f(0.75, 0.75, 0.75);
    glVertex3f (2.1, -4.2, 10.1);
    glVertex3f (3.5, -4.2, 10.1);
	glVertex3f (3.5, -2.0, 10.1);
    glVertex3f (2.1, -2.0, 10.1);
    glEnd();
   
    glBegin(GL_POLYGON);
    glColor3f(0.75, 0.75, 0.75);
    glVertex3f (3.2, 0.2, 10.1);
    glVertex3f (4.5, 0.2, 10.1);
	glVertex3f (4.5, -1.9, 10.1);
    glVertex3f (3.2, -1.9, 10.1);
    glEnd();
    
    //JENDELA KIRI
    glBegin(GL_POLYGON);
    glColor3f(0.5,0.0,0.0);
    glVertex3f (-7, -7, 10.1);
    glVertex3f (0.0, -7, 10.1);
	glVertex3f (0.0,0.0, 10.1);
    glVertex3f (-7, 0.0, 10.1);
    glEnd();
    
    //JENDELA KANAN
    glBegin(GL_POLYGON);
    glColor3f(0.5,0.0,0.0);
    glVertex3f (7, -7, 10.1);
    glVertex3f (9, -7, 10.1);
	glVertex3f (9,0.0, 10.1);
    glVertex3f (7, 0.0, 10.1);
    glEnd();
    
     //JENDELA KANAN
    glBegin(GL_LINES);
    glLineWidth(10.0);
    glColor3f(1.0,1.0,0.0);
	glVertex3f (10.0,3.0, 10.1);
    glVertex3f (4.5, 3.0, 10.1);
    
    glVertex3f (9.9,-10, 10.1);
    glVertex3f (9.9, 3.0, 10.1);
    
    glColor3f(0.0,1.0,0.0);
    glVertex3f (4.6,-10, 10.1);
    glVertex3f (4.6, 3.0, 10.1);
    
    glVertex3f (5.5,-10, 10.1);
    glVertex3f (5.5, 3.0, 10.1);
    
    glVertex3f (6.5,-10, 10.1);
    glVertex3f (6.5, 3.0, 10.1);
    
    glColor3f(0.2,0.1,0.1);
    glVertex3f (2.0,-10, 10.1);
    glVertex3f (2.0, 3.0, 10.1);
    glEnd();
    
    //kanan
	glBegin(GL_QUADS);
	glColor3f(1.0,1.0,0.7);
	glVertex3f(10.0,10.0,10.0);
	glVertex3f(10.0,-10.0,10.0);
	glVertex3f(10.0,-10.0,-10.0);
	glVertex3f(10.0,10.0,-10.0);
	glEnd();
	
	//kiri
	glBegin(GL_QUADS);
	glColor3f(1.0,1.0,0.7);
	glVertex3f(-10.0,10.0,10.0);
	glVertex3f(-10.0,-10.0,10.0);
	glVertex3f(-10.0,-10.0,-10.0);
	glVertex3f(-10.0,10.0,-10.0);
	glEnd();
	
	//ATAP KANAN depan
	glBegin(GL_QUADS);
    glColor3f(0.5,0.0,0.2);
	glVertex3f (1.0, 8.0, 9.9+5.0);
    glVertex3f (11, 8.0, 9.9+5.0);
    glVertex3f (11, 10+5.0, 0.0);
    glVertex3f (1.0, 10+5.0, 0.0);
	glEnd();
	
	//ATAP KIRI depan
	glBegin(GL_QUADS);
    glColor3f(0.6,0.0,0.2);
	glVertex3f (-11.0, 8.0, 10.0+5.0);
    glVertex3f (1.0+1.0, 8.0, 10.0+5.0);
    glVertex3f (1.0+1.0, 10+6.0,0.0);
    glVertex3f (-11, 10+6.0, 0.0);
	glEnd();
	
	//ATAP KANAN belakang
	glBegin(GL_QUADS);
    glColor3f(0.5,0.0,0.2);
	glVertex3f (1.0, 8.0, -9.9-5.0);
    glVertex3f (11, 8.0, -9.9-5.0);
    glVertex3f (11, 10+5.0, 0.0);
    glVertex3f (1.0, 10+5.0, 0.0);
	glEnd();
	
	//ATAP KIRI belakang
	glBegin(GL_QUADS);
    glColor3f(0.6,0.0,0.2);
	glVertex3f (-11.0, 8.0, -10.0-5.0);
    glVertex3f (1.0+1.0, 8.0, -10.0-5.0);
    glVertex3f (1.0+1.0, 10+6.0,0.0);
    glVertex3f (-11, 10+6.0, 0.0);
	glEnd();
	
	//belakang
	glBegin(GL_QUADS);
	glColor3f(1.0,1.0,0.7);
	glVertex3f(-10.0,-10.0,-10.0);
	glVertex3f(-10.0,10.0,-10.0);
	glVertex3f(10.0,10.0,-10.0);
	glVertex3f(10.0,-10.0,-10.0);
	glEnd();
	
	glPopMatrix();
	glutSwapBuffers();
} 
 
 void idle()
 {
 	if (!mouseDown)
 	{
 		xrot += 0.3f;
 		yrot += 0.4f;
 	}
glutPostRedisplay();
 }
 
 void mouse(int button, int state, int x, int y)
 {
 	if(button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
 	{
 		mouseDown = true;
 		xdiff = x - yrot;
 		ydiff = -y + xrot;
 	}
	else
	mouseDown = false;
 }
 

 void mouseMotion(int x, int y)
 {
 	if (mouseDown)
 	{
 		yrot = x - xdiff;
 		xrot = y + ydiff;
 		
 		glutPostRedisplay();
 	}
 }
 
  void ukuran(int lebar, int tinggi)
 {
 	if(tinggi==0) tinggi == 1;
 	glMatrixMode(GL_PROJECTION);
 	glLoadIdentity();
 	gluPerspective(50.0, lebar/tinggi, 5.0, 500.0);
 	glTranslatef(0.0, -5.0, -150.0);
 	glMatrixMode(GL_MODELVIEW);
 }
 
 
 
